name: Build Multi-Platform Executables

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            archive_ext: tar.gz
          - os: windows-latest
            platform: windows
            arch: x64
            archive_ext: zip
          - os: macos-latest
            platform: macos
            arch: arm64
            archive_ext: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra build

    - name: Build executables (Linux/Windows)
      if: matrix.platform != 'macos'
      run: |
        uv run python build.py

    - name: Debug - List built files (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Host "Contents of dist directory:"
        Get-ChildItem dist/ -Recurse | Format-Table Name, Length, LastWriteTime

    - name: Debug - List built files (Unix)
      if: matrix.platform != 'windows'
      run: |
        echo "Contents of dist directory:"
        ls -la dist/

    - name: Build executables (macOS)
      if: matrix.platform == 'macos'
      run: |
        uv run python -m PyInstaller --clean pycomicconverter-cli.spec
        uv run python -m PyInstaller --clean pycomicconverter-gui.spec

    - name: Create release directory
      run: |
        mkdir -p release

    - name: Package executables (Linux)
      if: matrix.platform == 'linux'
      run: |
        cp dist/pycomicconverter-cli release/
        cp dist/pycomicconverter-gui release/
        cd release
        tar -czf pycomicconverter-linux-x64.tar.gz pycomicconverter-cli pycomicconverter-gui

    - name: Package executables (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        # Copy CLI executable (should be .exe)
        if (Test-Path "dist/pycomicconverter-cli.exe") {
          Copy-Item "dist/pycomicconverter-cli.exe" release/
          Write-Host "Copied CLI executable (.exe)"
        } elseif (Test-Path "dist/pycomicconverter-cli") {
          Copy-Item "dist/pycomicconverter-cli" release/
          Write-Host "Copied CLI executable (no .exe)"
        }
        
        # Copy GUI executable (could be .exe or directory)
        if (Test-Path "dist/pycomicconverter-gui.exe") {
          Copy-Item "dist/pycomicconverter-gui.exe" release/
          Write-Host "Copied GUI executable (.exe)"
        } elseif (Test-Path "dist/pycomicconverter-gui") {
          Copy-Item "dist/pycomicconverter-gui" release/ -Recurse
          Write-Host "Copied GUI directory"
        }
        
        cd release
        $files = Get-ChildItem -Name
        Write-Host "Files to archive: $($files -join ', ')"
        Compress-Archive -Path * -DestinationPath pycomicconverter-windows-x64.zip

    - name: Package executables (macOS)
      if: matrix.platform == 'macos'
      run: |
        cp dist/pycomicconverter-cli release/
        cp -r dist/pyComicConverter.app release/
        cd release
        tar -czf pycomicconverter-macos-arm64.tar.gz pycomicconverter-cli pyComicConverter.app

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pycomicconverter-${{ matrix.platform }}-${{ matrix.arch }}
        path: release/pycomicconverter-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.archive_ext }}
        retention-days: 30

    - name: Upload to release
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: softprops/action-gh-release@v2
      with:
        files: release/pycomicconverter-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.archive_ext }}
        token: ${{ secrets.GITHUB_TOKEN }}